import sqlite3
import time
import random
from functools import wraps
import telebot
from telebot import types
from telebot.util import escape
import requests
import json
import re

# ================== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==================
BOT_TOKEN = "7647406503:AAG2ECMSnFhHX1Tx4uH4oi2fP8ZnZHH6_1I"   # <-- –í–ê–® –¢–û–ö–ï–ù
DB_PATH = "gubka1_bot.db"
START_BALANCE = 0.0
ADMINS = [1264898025,8384858757]  # <-- –í–ê–® ID –ê–î–ú–ò–ù–ê
SUBGRAM_API_URL = "https://api.subgram.org"
# ================================================

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# ========== –ë–î ==========
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º isolation_level=None –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
conn = sqlite3.connect(DB_PATH, check_same_thread=False, isolation_level=None)
# –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –∫—É—Ä—Å–æ—Ä –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
initial_cursor = conn.cursor()

initial_cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    balance REAL DEFAULT 0.0,
    invited INTEGER DEFAULT 0,
    subscribed INTEGER DEFAULT 0,
    clicks INTEGER DEFAULT 0,
    created_at INTEGER,
    referrer_id INTEGER DEFAULT NULL,
    last_click_at REAL DEFAULT 0.0,
    last_bonus_at REAL DEFAULT 0.0
)""")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS settings (key TEXT PRIMARY KEY, value TEXT)")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS withdraw_options (code TEXT PRIMARY KEY, price REAL, label TEXT)")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS withdraw_requests (request_id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, option_code TEXT, status TEXT DEFAULT 'pending', created_at INTEGER)")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS channels (channel_id INTEGER PRIMARY KEY, username TEXT, title TEXT)")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS promo_codes (code TEXT PRIMARY KEY, reward REAL, uses_left INTEGER)")
initial_cursor.execute("CREATE TABLE IF NOT EXISTS promo_activations (code TEXT, user_id INTEGER, PRIMARY KEY(code, user_id))")
initial_cursor.execute("""
CREATE TABLE IF NOT EXISTS completed_tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    link TEXT,
    completion_time INTEGER,
    reward_amount REAL,
    is_checked INTEGER DEFAULT 0
)""")

def add_column_if_not_exists(table, column, definition):
    local_cursor = conn.cursor()
    local_cursor.execute(f"PRAGMA table_info({table})")
    columns = [info[1] for info in local_cursor.fetchall()]
    if column not in columns:
        local_cursor.execute(f"ALTER TABLE {table} ADD COLUMN {column} {definition}")
        print(f"Added column '{column}' to table '{table}'")

add_column_if_not_exists("users", "last_click_at", "REAL DEFAULT 0.0")
add_column_if_not_exists("users", "referrer_id", "INTEGER DEFAULT NULL")
add_column_if_not_exists("users", "last_bonus_at", "REAL DEFAULT 0.0")
add_column_if_not_exists("completed_tasks", "link", "TEXT")

# ========== –§—É–Ω–∫—Ü–∏–∏ ==========
def set_setting(key, value):
    local_cursor = conn.cursor()
    local_cursor.execute("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", (key, str(value)))

def get_setting(key, default=None):
    local_cursor = conn.cursor()
    local_cursor.execute("SELECT value FROM settings WHERE key = ?", (key,))
    r = local_cursor.fetchone()
    return r[0] if r else default

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
local_cursor = conn.cursor()
if local_cursor.execute("SELECT COUNT(*) FROM withdraw_options").fetchone()[0] == 0:
    default_options = [("wd_15_bear", 15.0, "15 ‚≠ê (üêª)"), ("wd_15_heart", 15.0, "15 ‚≠ê (üíñ)"), ("wd_25_rose", 25.0, "25 ‚≠ê (üåπ)"), ("wd_25_box", 25.0, "25 ‚≠ê (üéÅ)"),("wd_50_champ", 50.0, "50 ‚≠ê (üçæ)"), ("wd_50_flowers", 50.0, "50 ‚≠ê (üíê)"), ("wd_50_rocket", 50.0, "50 ‚≠ê (üöÄ)"), ("wd_50_cake", 50.0, "50 ‚≠ê (üéÇ)"),("wd_100_trophy", 100.0, "100 ‚≠ê (üèÜ)"), ("wd_100_ring", 100.0, "100 ‚≠ê (üíç)"), ("wd_100_diamond", 100.0, "100 ‚≠ê (üíé)"),("wd_tg_prem", 1700.0, "Telegram Premium 6–º–µ—Å. (1700‚≠ê)")]
    local_cursor.executemany("INSERT INTO withdraw_options (code, price, label) VALUES (?, ?, ?)", default_options)

default_settings = {
    "start_text_v2": "1Ô∏è‚É£ –ü–æ–ª—É—á–∏ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É ‚Äî –∂–º–∏ ¬´‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã¬ª\n2Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ‚Äî 3‚≠êÔ∏è –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã (–ü—Ä–æ—Ñ–∏–ª—å)\n‚Äî –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è\n‚Äî –ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π –±–∞–ª–∞–Ω—Å!\n‚Äî –£—á–∞—Å—Ç–≤—É–π –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–∞ —Ç–æ–ø\n\nüîª <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
    "start_image": "", "earn_image": "https://i.imgur.com/k6rQhQp.jpeg", "profile_media": "", "profile_media_type": "none",
    "withdraw_media": "", "withdraw_media_type": "none", "top_image": "", "roulette_image": "", "transfer_image": "",
    "click_reward": "0.1", "click_cooldown": "300", "daily_bonus_amount": "1.0", "referral_reward": "3.0",
    "min_invites_for_withdraw": "5", "min_invites_for_transfer": "5", "bot_name": "–ì—É–±–∫–∞ –ë–æ–±", "review_channel_link": "",
    "clicker_popup_title": "gubkastarsrobot", "roulette_win_chance": "45", "share_text": "‚≠ê –ü–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –≤ –ì—É–±–∫–µ –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏!",
    "subgram_api_key": "", "subgram_op_image": "", "subgram_task_image": "", "subgram_max_sponsors": "4", "subgram_task_reward": "2.0"
}
for key, value in default_settings.items():
    if get_setting(key) is None:
        set_setting(key, value)

def get_user(user_id):
    local_cursor = conn.cursor()
    row = local_cursor.execute("SELECT user_id, username, first_name, balance, invited, subscribed, clicks, last_click_at, referrer_id, last_bonus_at FROM users WHERE user_id = ?", (user_id,)).fetchone()
    if row: return {"user_id": row[0], "username": row[1], "first_name": row[2], "balance": float(row[3]), "invited": int(row[4]), "subscribed": int(row[5]), "clicks": int(row[6]), "last_click_at": float(row[7]), "referrer_id": row[8], "last_bonus_at": float(row[9])}
    return None

def ensure_user(user, referrer_id=None):
    u = get_user(user.id)
    local_cursor = conn.cursor()
    if not u:
        local_cursor.execute("INSERT INTO users (user_id, username, first_name, balance, invited, subscribed, clicks, created_at, last_click_at, referrer_id, last_bonus_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (user.id, user.username or "", user.first_name or "", START_BALANCE, 0, 0, 0, int(time.time()), 0.0, referrer_id, 0.0))
        return get_user(user.id), True
    if u['username'] != (user.username or "") or u['first_name'] != (user.first_name or ""):
        local_cursor.execute("UPDATE users SET username = ?, first_name = ? WHERE user_id = ?", (user.username or "", user.first_name or "", user.id))
    return get_user(user.id), False

def add_balance(user_id, amount):
    local_cursor = conn.cursor()
    local_cursor.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (float(amount), user_id))

if not hasattr(bot, "temp"):
    bot.temp = {"admin_sessions": {}, "promo_temp": {}, "transfer_mode": {}, "pending_transfer": {}, "pending_broadcast": {}}

# ========== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========
def main_menu_inline():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("‚ú® –ö–ª–∏–∫–µ—Ä", callback_data="do_click"), types.InlineKeyboardButton("‚≠ê –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã", callback_data="menu_earn"))
    kb.add(types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile"), types.InlineKeyboardButton("üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥", callback_data="menu_withdraw"))
    kb.add(types.InlineKeyboardButton("üìù –ó–∞–¥–∞–Ω–∏—è", callback_data="menu_tasks"), types.InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="menu_top"))
    kb.add(types.InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="menu_roulette"))
    review_link = get_setting("review_channel_link")
    if review_link: kb.add(types.InlineKeyboardButton("üíå –û—Ç–∑—ã–≤—ã", url=review_link))
    else: kb.add(types.InlineKeyboardButton("üíå –û—Ç–∑—ã–≤—ã", callback_data="menu_reviews_placeholder"))
    return kb

def earn_menu_kb(user_id):
    kb = types.InlineKeyboardMarkup(row_width=1)
    share_text = get_setting("share_text", "‚≠ê –ü–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –≤ –ì—É–±–∫–µ –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏!")
    kb.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑—å—è–º", switch_inline_query=share_text))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb

def profile_kb_new():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üéâ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="profile_promo"))
    kb.add(types.InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–∫–∞", callback_data="profile_daily_bonus"))
    kb.add(types.InlineKeyboardButton("‚≠ê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ ‚≠ê –¥—Ä—É–≥—É", callback_data="profile_transfer"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb
    
def transfer_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_transfer"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb

def back_to_main_kb():
    return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))

def roulette_kb():
    kb = types.InlineKeyboardMarkup(row_width=3)
    bet_amounts = [0.5, 1, 2, 3, 5, 10, 50, 100, 500]
    buttons = [types.InlineKeyboardButton(f"{b} ‚≠ê", callback_data=f"roulette_spin|{b}") for b in bet_amounts]
    kb.add(*buttons)
    kb.add(types.InlineKeyboardButton("‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb

def withdraw_menu_kb():
    local_cursor = conn.cursor()
    options = local_cursor.execute("SELECT code, label FROM withdraw_options ORDER BY price").fetchall()
    kb = types.InlineKeyboardMarkup(row_width=2)
    buttons = [types.InlineKeyboardButton(label, callback_data=f"wd_request|{code}") for code, label in options]
    kb.add(*buttons)
    kb.add(types.InlineKeyboardButton("‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb

def admin_menu_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adm_list_users"), types.InlineKeyboardButton("üí∞ –í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å ‚≠ê", callback_data="adm_change_balance"))
    kb.add(types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adm_broadcast"), types.InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="adm_promo"))
    kb.add(types.InlineKeyboardButton("üîó –û–±—è–∑. –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="adm_channels"), types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="adm_settings"))
    kb.add(types.InlineKeyboardButton("‚¨Ö –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
    return kb

def admin_promo_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ", callback_data="adm_promo_add"), types.InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ", callback_data="adm_promo_list"))
    kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ", callback_data="adm_promo_delete"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_main"))
    return kb
    
def admin_channels_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="adm_channel_add"), types.InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="adm_channel_list"))
    kb.add(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="adm_channel_delete"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_main"))
    return kb

def admin_settings_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(types.InlineKeyboardButton("üñº –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞", callback_data="adm_settings_media"), types.InlineKeyboardButton("üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥", callback_data="adm_settings_rewards"))
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="adm_settings_general"), types.InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram", callback_data="adm_settings_subgram"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_main"))
    return kb

def admin_media_settings_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üñº –†–µ–¥. —Å—Ç–∞—Ä—Ç", callback_data="adm_edit_start"))
    kb.add(types.InlineKeyboardButton("üñº –†–µ–¥. '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'", callback_data="adm_edit_earn_photo"))
    kb.add(types.InlineKeyboardButton("üñº –†–µ–¥. –ø—Ä–æ—Ñ–∏–ª—å", callback_data="adm_edit_profile"))
    kb.add(types.InlineKeyboardButton("üñº –†–µ–¥. –≤—ã–≤–æ–¥", callback_data="adm_edit_withdraw"))
    kb.add(types.InlineKeyboardButton("üñº –†–µ–¥. –ø–µ—Ä–µ–≤–æ–¥", callback_data="adm_edit_transfer_photo"))
    kb.add(types.InlineKeyboardButton("üñº –§–æ—Ç–æ —Ç–æ–ø–∞", callback_data="adm_edit_top_photo"))
    kb.add(types.InlineKeyboardButton("üñº –§–æ—Ç–æ —Ä—É–ª–µ—Ç–∫–∏", callback_data="adm_edit_roulette_photo"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_settings"))
    return kb

def admin_rewards_settings_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∫–ª–∏–∫–∞", callback_data="adm_set_click_reward"), types.InlineKeyboardButton("üí∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="adm_set_daily_bonus"))
    kb.add(types.InlineKeyboardButton("‚è± –ö–î –∫–ª–∏–∫–∞ (–º–∏–Ω)", callback_data="adm_set_click_cooldown"), types.InlineKeyboardButton("ü§ù –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="adm_set_referral_reward"))
    kb.add(types.InlineKeyboardButton("üìà –ú–∏–Ω. —Ä–µ—Ñ. –¥–ª—è –≤—ã–≤–æ–¥–∞", callback_data="adm_set_min_invites"), types.InlineKeyboardButton("üìà –ú–∏–Ω. —Ä–µ—Ñ. –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="adm_set_min_invites_transfer"))
    kb.add(types.InlineKeyboardButton("üçÄ –®–∞–Ω—Å –ø–æ–±–µ–¥—ã –≤ —Ä—É–ª–µ—Ç–∫–µ %", callback_data="adm_set_win_chance"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_settings"))
    return kb

def admin_general_settings_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –ò–º—è –±–æ—Ç–∞", callback_data="adm_set_bot_name"), types.InlineKeyboardButton("üîó –ö–∞–Ω–∞–ª –æ—Ç–∑—ã–≤–æ–≤", callback_data="adm_set_review_link"))
    kb.add(types.InlineKeyboardButton("‚úèÔ∏è –Æ–∑ –≤ –∫–ª–∏–∫–µ—Ä–µ", callback_data="adm_set_clicker_title"), types.InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç –¥–ª—è '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è'", callback_data="adm_set_share_text"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_settings"))
    return kb

def admin_subgram_settings_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    api_key_status = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if get_setting("subgram_api_key") else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    kb.add(types.InlineKeyboardButton(f"üîë API –ö–ª—é—á ({api_key_status})", callback_data="adm_set_subgram_key"))
    kb.add(types.InlineKeyboardButton("üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ó–∞–¥–∞–Ω–∏–µ", callback_data="adm_set_subgram_task_reward"))
    kb.add(types.InlineKeyboardButton("üñº –§–æ—Ç–æ –¥–ª—è –û–ü", callback_data="adm_edit_subgram_op_photo"))
    kb.add(types.InlineKeyboardButton("üñº –§–æ—Ç–æ –¥–ª—è –ó–∞–¥–∞–Ω–∏–π", callback_data="adm_edit_subgram_task_photo"))
    kb.add(types.InlineKeyboardButton("üî¢ –ú–∞–∫—Å. —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –≤ –û–ü", callback_data="adm_set_subgram_max_sponsors"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_settings"))
    return kb

# ========== –î–µ–∫–æ—Ä–∞—Ç–æ—Ä ==========
def admin_only(f):
    @wraps(f)
    def wrapper(obj, *a, **k):
        user_id = getattr(obj, "from_user", getattr(obj, "chat", None)).id
        if user_id not in ADMINS:
            if isinstance(obj, types.CallbackQuery): bot.answer_callback_query(obj.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.", show_alert=True)
            else: bot.send_message(obj.chat.id, "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.", parse_mode="HTML")
            return
        return f(obj, *a, **k)
    return wrapper

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ==========
def show_main_menu(chat_id, message_id=None):
    if message_id:
        try: bot.delete_message(chat_id, message_id)
        except Exception: pass
    text, img = get_setting("start_text_v2"), get_setting("start_image")
    if img: bot.send_photo(chat_id, img, caption=text, reply_markup=main_menu_inline(), parse_mode="HTML")
    else: bot.send_message(chat_id, text, reply_markup=main_menu_inline(), parse_mode="HTML")

def show_profile_menu(user, chat_id, message_id=None):
    media, m_type = get_setting("profile_media"), get_setting("profile_media_type")
    u = get_user(user['user_id'])
    txt = f"‚ú® <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nüí¨ <b>–ò–º—è:</b> {escape(u['first_name']) or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\nüÜî <b>ID:</b> <code>{u['user_id']}</code>\nüë§ @{u['username'] if u['username'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n‚úÖ <b>–í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π:</b> {u['invited']}\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {u['balance']:.2f} ‚≠ê\n\n<b>‚ÅâÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å?</b>\n<blockquote>–ü–æ—Å—Ç–∞–≤—å —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≥ –∞–∫–∫–∞—É–Ω—Ç–∞, –∏ –ø–æ–ª—É—á–∞–π +1‚≠ê –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.</blockquote>"
    send_or_edit(None, txt, profile_kb_new(), photo=media if m_type == 'photo' else None, video=media if m_type == 'video' else None, chat_id=chat_id, message_id=message_id)

def process_initial_access(user, chat_id, message_id=None):
    if user['referrer_id'] and user['subscribed'] == 0:
        referrer = get_user(user['referrer_id'])
        if referrer:
            reward = float(get_setting("referral_reward", "3.0"))
            add_balance(referrer['user_id'], reward)
            local_cursor = conn.cursor()
            local_cursor.execute("UPDATE users SET invited = invited + 1 WHERE user_id = ?", (referrer['user_id'],))
            local_cursor.execute("UPDATE users SET subscribed = 1 WHERE user_id = ?", (user['user_id'],))
            try: bot.send_message(referrer['user_id'], f"üéâ –í–∞—à –¥—Ä—É–≥ <a href='tg://user?id={user['user_id']}'>{escape(user['first_name'])}</a> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ—à–µ–ª –ø–æ–¥–ø–∏—Å–∫—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{reward} ‚≠ê</b>.", parse_mode="HTML")
            except Exception: pass
    show_main_menu(chat_id, message_id)

def check_local_subscriptions(user_id):
    local_cursor = conn.cursor()
    unsubscribed = []
    channels = local_cursor.execute("SELECT channel_id, username, title FROM channels").fetchall()
    if not channels: return []
    for channel_id, username, title in channels:
        try:
            member = bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                unsubscribed.append({'link': f"https://t.me/{username}", 'button_text': title, 'type': 'channel'})
        except Exception: unsubscribed.append({'link': f"https://t.me/{username}", 'button_text': title, 'type': 'channel'})
    return unsubscribed

def subgram_api_request(endpoint, data):
    api_key = get_setting("subgram_api_key")
    print("[SubGram] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API-–∫–ª—é—á:", api_key)
    if not api_key:
        print("[SubGram] –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω: API-–∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return {"status": "ok"}
    headers = {"Auth": api_key, "Content-Type": "application/json"}
    try:
        response = requests.post(f"{SUBGRAM_API_URL}/{endpoint}", headers=headers, json=data, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        print(f"[SubGram] HTTP –û—à–∏–±–∫–∞ /{endpoint}: {e.response.status_code} {e.response.text}")
        if e.response.status_code == 404: return {"status": "ok"}
        return {"status": "error", "message": f"HTTP {e.response.status_code}: {e.response.text}"}
    except requests.exceptions.RequestException as e: 
        print(f"[SubGram] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ /{endpoint}: {e}")
        return {"status": "error", "message": str(e)}

def send_or_edit(call, text, kb, photo=None, video=None, chat_id=None, message_id=None):
    if call:
        chat_id = call.message.chat.id
        message_id = call.message.message_id
    new_media_type = 'video' if video else 'photo' if photo else 'text'
    try: current_media_type = call.message.content_type if call and call.message else 'text'
    except Exception: current_media_type = 'text'
    try:
        if not message_id: raise ValueError("No message_id")
        if new_media_type == 'text' and current_media_type == 'text':
            bot.edit_message_text(text, chat_id, message_id, reply_markup=kb, parse_mode="HTML")
        elif new_media_type == current_media_type and photo:
             bot.edit_message_media(types.InputMediaPhoto(photo, caption=text, parse_mode="HTML"), chat_id, message_id, reply_markup=kb)
        elif new_media_type == current_media_type and video:
             bot.edit_message_media(types.InputMediaVideo(video, caption=text, parse_mode="HTML"), chat_id, message_id, reply_markup=kb)
        else:
            bot.delete_message(chat_id, message_id)
            if photo: bot.send_photo(chat_id, photo, caption=text, reply_markup=kb, parse_mode="HTML")
            elif video: bot.send_video(chat_id, video, caption=text, reply_markup=kb, parse_mode="HTML")
            else: bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        try:
            if message_id: bot.delete_message(chat_id, message_id)
        except Exception: pass
        if photo: bot.send_photo(chat_id, photo, caption=text, reply_markup=kb, parse_mode="HTML")
        elif video: bot.send_video(chat_id, video, caption=text, reply_markup=kb, parse_mode="HTML")
        else: bot.send_message(chat_id, text, reply_markup=kb, parse_mode="HTML")

def handle_subscription_check(user, chat_id, message_id=None, is_recheck=False):
    unsubscribed_local = check_local_subscriptions(user['user_id'])
    
    print(f"[SubGram] –ó–∞–ø—Ä–æ—Å –û–ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}...")
    payload = {"chat_id": chat_id, "user_id": user['user_id'], "first_name": user['first_name'], "username": user['username'], "max_sponsors": int(get_setting('subgram_max_sponsors', 4))}
    sg_response = subgram_api_request("get-sponsors", payload)
    
    if sg_response.get("status") == "register":
        reg_url = sg_response['additional']['registration_url']
        builder = types.InlineKeyboardBuilder()
        builder.button(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", web_app=types.WebAppInfo(url=reg_url))
        builder.button(text="–Ø –≤—ã–ø–æ–ª–Ω–∏–ª(–∞)", callback_data="check_subs")
        builder.adjust(1)
        send_or_edit(None, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç.", builder.as_markup(), chat_id=chat_id, message_id=message_id)
        return
        
    if sg_response.get("status") in ["error", "gender", "age"]: sg_response['status'] = 'ok'

    unsubscribed_sg = []
    if sg_response.get("status") == "warning":
        sponsors = sg_response.get("additional", {}).get("sponsors", [])
        unsubscribed_sg = [s for s in sponsors if s.get('status') == 'unsubscribed' and s.get('available_now')]
    print(f"[SubGram] –ü–æ–ª—É—á–µ–Ω–æ {len(unsubscribed_sg)} –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}.")

    combined_unsubscribed = unsubscribed_local + unsubscribed_sg
    
    if not combined_unsubscribed:
        if is_recheck:
            try: bot.edit_message_text("‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>", chat_id, message_id, reply_markup=None, parse_mode="HTML")
            except Exception: pass
            process_initial_access(user, chat_id)
        else:
            process_initial_access(user, chat_id, message_id)
    else:
        kb = types.InlineKeyboardMarkup(row_width=1)
        for channel in combined_unsubscribed:
            link, button_text, res_type = channel.get('link'), channel.get('button_text', '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'), channel.get('type', 'channel')
            prefix = "üîó" if res_type == 'channel' else "ü§ñ"
            kb.add(types.InlineKeyboardButton(f"{prefix} {button_text}", url=link))
        kb.add(types.InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subs"))
        text = "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ</b>\n\n–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:"
        photo = get_setting("subgram_op_image")
        send_or_edit(None, text, kb, photo=photo, chat_id=chat_id, message_id=message_id)

def check_for_unsubscribes(user_id):
    local_cursor = conn.cursor()
    seven_days_ago = int(time.time()) - 7 * 86400
    
    tasks_to_check = local_cursor.execute("SELECT id, link, reward_amount FROM completed_tasks WHERE user_id = ? AND is_checked = 0 AND completion_time > ?", (user_id, seven_days_ago)).fetchall()
    
    if not tasks_to_check:
        local_cursor.execute("UPDATE completed_tasks SET is_checked = 1 WHERE user_id = ? AND is_checked = 0 AND completion_time <= ?", (user_id, seven_days_ago))
        return

    print(f"[SubGram] –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(tasks_to_check)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    links = [row[1] for row in tasks_to_check]
    payload = {"user_id": user_id, "links": links}
    sg_response = subgram_api_request("get-user-subscriptions", payload)

    if sg_response.get("status") == "ok":
        subscriptions = {sub['link']: sub['status'] for sub in sg_response.get("additional", {}).get("sponsors", [])}
        for task_id, link, reward in tasks_to_check:
            if subscriptions.get(link) != 'subscribed':
                add_balance(user_id, -reward)
                update_cursor = conn.cursor()
                update_cursor.execute("UPDATE completed_tasks SET is_checked = 1 WHERE id = ?", (task_id,))
                try: bot.send_message(user_id, f"‚ùóÔ∏è –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–µ—Å—É—Ä—Å–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è 7 –¥–Ω–µ–π. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ <b>{reward} ‚≠ê</b> –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞.", parse_mode="HTML")
                except Exception: pass
    
    final_cursor = conn.cursor()
    final_cursor.execute("UPDATE completed_tasks SET is_checked = 1 WHERE user_id = ? AND is_checked = 0 AND completion_time <= ?", (user_id, seven_days_ago))


# ========== –ö–æ–º–∞–Ω–¥—ã ==========
@bot.message_handler(commands=['start'])
def cmd_start(msg: types.Message):
    referrer_id = None
    if msg.text and len(msg.text.split()) > 1:
        try:
            ref_candidate = int(msg.text.split()[1])
            if ref_candidate != msg.from_user.id: referrer_id = ref_candidate
        except (ValueError, IndexError): pass
    
    user, is_new = ensure_user(msg.from_user, referrer_id)
    temp_msg = bot.send_message(msg.chat.id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...", parse_mode="HTML")
    handle_subscription_check(user, msg.chat.id, temp_msg.message_id, is_recheck=False)

@bot.message_handler(commands=['adm'])
@admin_only
def cmd_adm(msg):
    bot.send_message(msg.chat.id, "<b>–ê–¥–º–∏–Ω-–º–µ–Ω—é:</b>", reply_markup=admin_menu_kb(), parse_mode="HTML")

@bot.inline_handler(func=lambda query: True)
def inline_handler(query: types.InlineQuery):
    try:
        user_id = query.from_user.id
        ref_link = f"https://t.me/{bot.get_me().username}?start={user_id}"
        share_text = get_setting("share_text", "‚≠ê –ü–æ–ª—É—á–∞–π –∑–≤—ë–∑–¥—ã –≤ –ì—É–±–∫–µ –∏ –æ–±–º–µ–Ω–∏–≤–∞–π –∏—Ö –Ω–∞ –ø–æ–¥–∞—Ä–∫–∏!")
        r = types.InlineQueryResultArticle(id='1', title="–ù–∞–∂–º–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", description=share_text, input_message_content=types.InputTextMessageContent(message_text=f"{share_text}\n\n‚û°Ô∏è <b>{ref_link}", parse_mode="HTML"), reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üéÅ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É!", url=ref_link)))
        bot.answer_inline_query(query.id, [r], cache_time=1)
    except Exception: pass

@bot.callback_query_handler(func=lambda c: True)
def callbacks(call: types.CallbackQuery):
    try:
        data, uid = call.data, call.from_user.id
        u = ensure_user(call.from_user)[0]
        check_for_unsubscribes(uid)

        if data == "to_main":
            bot.temp.get('transfer_mode', {}).pop(uid, None)
            show_main_menu(call.message.chat.id, call.message.message_id)
        
        elif data == "check_subs":
            bot.edit_message_text("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...", call.message.chat.id, call.message.message_id, parse_mode="HTML")
            handle_subscription_check(u, call.message.chat.id, call.message.message_id, is_recheck=True)

        elif data == "menu_tasks":
            print(f"[SubGram] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–¥–∞–Ω–∏–µ.")
            api_key = get_setting("subgram_api_key")
            if not api_key:
                send_or_edit(call, "üìù <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç.", back_to_main_kb())
                return
            payload = {"chat_id": call.message.chat.id, "user_id": uid, "action": "newtask", "max_sponsors": 1}
            sg_response = subgram_api_request("get-sponsors", payload)
            if sg_response.get("status") in ["ok", "error"] or not sg_response.get("additional", {}).get("sponsors"):
                kb = types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="menu_tasks"), types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"))
                send_or_edit(call, "üìù <b>–ó–∞–¥–∞–Ω–∏—è</b>\n\n–°–µ–π—á–∞—Å –¥–ª—è –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!", kb)
                return
            
            sponsor = sg_response["additional"]["sponsors"][0]
            task_photo = get_setting("subgram_task_image")
            task_reward = float(get_setting("subgram_task_reward", "2.0"))
            kb = types.InlineKeyboardMarkup(row_width=2)
            check_callback = f"check_task_subgram|{sponsor['ads_id']}|{sponsor['link']}"

            if sponsor['type'] == 'bot':
                text = f"‚ú® <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b> ‚ú®\n\n‚Ä¢ <b>–ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞</b>\n\n<b>–ù–∞–≥—Ä–∞–¥–∞: {task_reward} ‚≠ê</b>\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∂–º–∏ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫¬ª"
                kb.add(types.InlineKeyboardButton(f"ü§ñ {sponsor['button_text']}", url=sponsor['link']))
                kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫", callback_data=check_callback))
            else:
                text = f"‚ú® <b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b> ‚ú®\n\n‚Ä¢ <b>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n<b>–ù–∞–≥—Ä–∞–¥–∞: {task_reward} ‚≠ê</b>\n\n‚ÄºÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ <b>–ù–ï –æ—Ç–ø–∏—Å—ã–≤–∞–π—Å—è</b> –æ—Ç –∫–∞–Ω–∞–ª–∞/–±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 7-–º–∏ –¥–Ω–µ–π\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∂–º–∏ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª"
                kb.add(types.InlineKeyboardButton(f"üîó {sponsor['button_text']}", url=sponsor['link']))
                kb.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=check_callback))

            kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main"), types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚û°Ô∏è", callback_data="menu_tasks"))
            send_or_edit(call, text, kb, photo=task_photo)

        elif data.startswith("check_task_subgram|"):
            _, ads_id, link = data.split("|", 2)
            payload = {"user_id": uid, "links": [link]}
            sg_response = subgram_api_request("get-user-subscriptions", payload)
            
            task_completed = False
            if sg_response.get("status") == "ok":
                sponsors = sg_response.get("additional", {}).get("sponsors", [])
                if sponsors and sponsors[0]['status'] == 'subscribed':
                    task_completed = True

            if task_completed:
                task_reward = float(get_setting("subgram_task_reward", "2.0"))
                add_balance(uid, task_reward)
                local_cursor = conn.cursor()
                local_cursor.execute("INSERT INTO completed_tasks (user_id, link, completion_time, reward_amount) VALUES (?, ?, ?, ?)", (uid, link, int(time.time()), task_reward))
                bot.answer_callback_query(call.id, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {task_reward} ‚≠ê.", show_alert=True)
                send_or_edit(call, "üìù <b>–ó–∞–¥–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b>", types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="menu_tasks"), types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="to_main")))
            else:
                bot.answer_callback_query(call.id, "‚ùå –í—ã –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        
        elif data == "menu_earn":
            ref_link = f"https://t.me/{bot.get_me().username}?start={uid}"
            text = f"‚ú® <b>–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –ø–æ {get_setting('referral_reward', '3.0')} ‚≠ê –æ—Ç –ì—É–±–∫–∏ –ë–æ–±–∞ –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ!</b>\n\nüîó <b><u>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</u></b>\n<code>{ref_link}</code>\n\nüöÄ <b>–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ?</b>\n‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üë•\n‚Ä¢ –ü–æ–¥–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Å–≤–æ–µ–º –¢–ì –∏–ª–∏ –≤ —Å–≤–æ–µ–º Telegram –∫–∞–Ω–∞–ª–µ üì≤\n‚Ä¢ –û—Å—Ç–∞–≤—å –µ—ë –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏–ª–∏ —á–∞—Ç–∞—Ö üí¨\n‚Ä¢ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π —Å—Å—ã–ª–∫—É –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö: TikTok, Instagram, WhatsApp –∏ –¥—Ä—É–≥–∏—Ö üåç"
            send_or_edit(call, text, earn_menu_kb(uid), photo=get_setting("earn_image"))
        
        elif data == "do_click":
            reward = float(get_setting('click_reward', '0.1'))
            cooldown = float(get_setting('click_cooldown', '300'))
            if (time.time() - u['last_click_at']) < cooldown:
                wait_str = time.strftime('%M –º–∏–Ω %S —Å–µ–∫', time.gmtime(cooldown - (time.time() - u['last_click_at'])))
                bot.answer_callback_query(call.id, f"–°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ —á–µ—Ä–µ–∑: {wait_str}", show_alert=True)
                return
            local_cursor = conn.cursor()
            local_cursor.execute("UPDATE users SET last_click_at = ? WHERE user_id = ?", (time.time(), uid));
            add_balance(uid, reward)
            bot.answer_callback_query(call.id, f"{get_setting('clicker_popup_title', 'bot')}\n\n–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) {reward:.2f} ‚≠ê", show_alert=True)

        elif data == "menu_roulette":
            u_updated = get_user(uid)
            text = f"üé∞ <b>–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {u_updated['balance']:.2f} ‚≠ê\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:"
            send_or_edit(call, text, roulette_kb(), photo=get_setting("roulette_image"))

        elif data.startswith("roulette_spin|"):
            bet_amount = float(data.split('|')[1])
            u_current = get_user(uid)
            if u_current['balance'] < bet_amount: return bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏!", show_alert=True)
            add_balance(uid, -bet_amount)
            if random.uniform(0, 100) < float(get_setting("roulette_win_chance", 45)):
                winnings = bet_amount * 2; add_balance(uid, winnings)
                popup_text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings:.2f} ‚≠ê"
            else:
                popup_text = f"üòï –£–≤—ã, –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet_amount:.2f} ‚≠ê"
            bot.answer_callback_query(call.id, popup_text, show_alert=True)
            new_text = f"üé∞ <b>–ö—Ä—É—Ç–∏ —Ä—É–ª–µ—Ç–∫—É –∏ —É–¥–≤–æ–π —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!</b>\n\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {get_user(uid)['balance']:.2f} ‚≠ê\n‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å—Ç–∞–≤–∫—É:"
            send_or_edit(call, new_text, roulette_kb(), photo=get_setting("roulette_image"))

        elif data == "menu_withdraw":
            media, m_type = get_setting("withdraw_media"), get_setting("withdraw_media_type")
            text = f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {u['balance']:.2f} ‚≠ê\n\n‚ÄºÔ∏è –î–ª—è –≤—ã–≤–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è:\n‚Äî –º–∏–Ω–∏–º—É–º <b>{get_setting('min_invites_for_withdraw', 5)} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö</b> –¥—Ä—É–∑–µ–π\n\n‚úÖ <b>–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥!</b>\n\n–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∏ –ø–æ–¥–∞—Ä–æ–∫:"
            send_or_edit(call, text, withdraw_menu_kb(), photo=media if m_type == 'photo' else None, video=media if m_type == 'video' else None)

        elif data.startswith("wd_request|"):
            min_invites = int(get_setting('min_invites_for_withdraw', 5))
            code = data.split("|", 1)[1]
            local_cursor = conn.cursor()
            price, label = local_cursor.execute("SELECT price, label FROM withdraw_options WHERE code = ?", (code,)).fetchone()
            if u['balance'] < price: return bot.answer_callback_query(call.id, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {price} ‚≠ê", show_alert=True)
            if u['invited'] < min_invites: return bot.answer_callback_query(call.id, f"–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ {min_invites - u['invited']} –¥—Ä—É–∑–µ–π.", show_alert=True)
            request_id = local_cursor.execute("INSERT INTO withdraw_requests (user_id, option_code, created_at) VALUES (?, ?, ?)", (uid, code, int(time.time()))).lastrowid
            admin_text = f"‚ùóÔ∏è <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{request_id}</b>\n\nüë§ <a href='tg://user?id={uid}'>{escape(u['first_name'])}</a> (<code>{uid}</code>)\nüí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {u['balance']:.2f} ‚≠ê\nü§ù <b>–î—Ä—É–∑–µ–π:</b> {u['invited']}\n\nüéÅ <b>–ó–∞–ø—Ä–æ—Å–∏–ª:</b> {label} ({price} ‚≠ê)"
            kb = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"wd_approve|{request_id}"), types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"wd_decline|{request_id}"))
            for admin_id in ADMINS:
                try: bot.send_message(admin_id, admin_text, reply_markup=kb, parse_mode="HTML")
                except Exception: pass
            bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!", show_alert=True)
            show_main_menu(call.message.chat.id, call.message.message_id)

        elif data.startswith(("wd_approve|", "wd_decline|")):
            if uid not in ADMINS: return
            action, request_id = data.split("|", 1)
            local_cursor = conn.cursor()
            req = local_cursor.execute("SELECT user_id, option_code, status FROM withdraw_requests WHERE request_id = ?", (request_id,)).fetchone()
            if not req: return bot.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", call.message.chat.id, call.message.message_id, parse_mode="HTML")
            target_uid, code, status = req
            if status != 'pending': return bot.answer_callback_query(call.id, f"–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å: {status})", show_alert=True)
            price, label = local_cursor.execute("SELECT price, label FROM withdraw_options WHERE code = ?", (code,)).fetchone()
            if action == "wd_approve":
                new_status, admin_fb = 'approved', f"‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b> (–∞–¥–º–∏–Ω {uid})"
                add_balance(target_uid, -price)
                review_link = get_setting("review_channel_link")
                user_msg = f"üéä {get_setting('bot_name', '–ë–æ—Ç')} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫!\n\n–û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –∏ —Å–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚≠ê –Ω–∞ –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ üíñ"
                kb = types.InlineKeyboardMarkup()
                if review_link: kb.add(types.InlineKeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", url=review_link))
                try: bot.send_message(target_uid, user_msg, reply_markup=kb if review_link else None, parse_mode="HTML")
                except Exception: pass
            else:
                new_status, admin_fb = 'declined', f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> (–∞–¥–º–∏–Ω {uid})"
                try: bot.send_message(target_uid, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ¬´{label}¬ª <b>–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>.", parse_mode="HTML")
                except Exception: pass
            local_cursor.execute("UPDATE withdraw_requests SET status = ? WHERE request_id = ?", (new_status, request_id))
            bot.edit_message_text(call.message.text + f"\n\n---\n{admin_fb}", call.message.chat.id, call.message.message_id, reply_markup=None, parse_mode="HTML")
        
        elif data == "menu_profile":
            bot.temp.get('transfer_mode', {}).pop(uid, None)
            show_profile_menu(u, call.message.chat.id, call.message.message_id)
            
        elif data == "profile_promo":
            bot.temp["promo_temp"][uid] = True
            send_or_edit(call, "<b>üéÅ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b>", types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")))
        
        elif data == "profile_transfer":
            min_invites = int(get_setting('min_invites_for_transfer', 5))
            if u['invited'] < min_invites: return bot.answer_callback_query(call.id, f"‚ùå –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–∏–Ω–∏–º—É–º {min_invites} –¥—Ä—É–∑–µ–π.", show_alert=True)
            bot.temp['transfer_mode'][uid] = True
            text = f"üéÅ <b>–ü–æ–¥–µ–ª–∏—Å—å –∑–≤—ë–∑–¥–∞–º–∏ —Å –¥—Ä—É–≥–æ–º!</b>\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚≠ê —Å —Ç–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥—É:</b>\n\n1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –±–æ—Ç—É –µ–≥–æ <b>Telegram ID</b>\n(—É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ, –Ω–∞–∂–∞–≤ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–ª–∏ –≤ @userinfobot)\n2Ô∏è‚É£ –í–≤–µ–¥–∏ <b>—Å—É–º–º—É –∑–≤—ë–∑–¥</b>\n\n–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É ID –¥—Ä—É–≥–∞ –∏ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ üëá"
            send_or_edit(call, text, transfer_kb(), photo=get_setting("transfer_image"))

        elif data == "confirm_transfer":
            pending = bot.temp.get('pending_transfer', {}).get(uid)
            if not pending: return bot.answer_callback_query(call.id, "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É.", show_alert=True)
            recipient_id, amount = pending['recipient'], pending['amount']
            if get_user(uid)['balance'] < amount: return bot.answer_callback_query(call.id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ —É–∂–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
            add_balance(uid, -amount); add_balance(recipient_id, amount)
            bot.answer_callback_query(call.id, f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ {amount} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient_id}!", show_alert=True)
            try: bot.send_message(recipient_id, f"üéâ –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –ø–µ—Ä–µ–≤–æ–¥ <b>{amount} ‚≠ê</b> –æ—Ç <a href='tg://user?id={uid}'>{escape(u['first_name'])}</a>!", parse_mode="HTML")
            except: pass
            bot.temp['pending_transfer'].pop(uid, None)
            bot.temp['transfer_mode'].pop(uid, None)
            show_profile_menu(u, call.message.chat.id, call.message.message_id)

        elif data == "profile_daily_bonus":
            cooldown = 86400
            time_since_last_bonus = time.time() - u['last_bonus_at']
            if time_since_last_bonus < cooldown:
                wait_str = time.strftime('%H —á %M –º–∏–Ω', time.gmtime(cooldown - time_since_last_bonus))
                return bot.answer_callback_query(call.id, f"–°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {wait_str}", show_alert=True)
            ref_link = f"https://t.me/{bot.get_me().username}?start={uid}"
            try:
                user_profile = bot.get_chat(uid)
                if ref_link in (user_profile.bio or ""):
                    bonus_amount = float(get_setting('daily_bonus_amount', 1.0))
                    add_balance(uid, bonus_amount)
                    local_cursor = conn.cursor()
                    local_cursor.execute("UPDATE users SET last_bonus_at = ? WHERE user_id = ?", (time.time(), uid))
                    bot.answer_callback_query(call.id, f"‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} ‚≠ê! –°–ª–µ–¥—É—é—â–∏–π –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.", show_alert=True)
                else:
                    bot.answer_callback_query(call.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
            except Exception:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.", show_alert=True)
        
        elif data == "menu_reviews_placeholder":
            bot.answer_callback_query(call.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ç–∑—ã–≤—ã.", show_alert=True)
        
        elif data == "menu_top":
            local_cursor = conn.cursor()
            top_users = local_cursor.execute("SELECT first_name, invited FROM users WHERE invited > 0 ORDER BY invited DESC LIMIT 10").fetchall()
            text = "üèÜ <b>–¢–æ–ø –ø–æ–∫–∞ –ø—É—Å—Ç. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π!</b>" if not top_users else "üèÜ <b>–¢–æ–ø 10 –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º:</b>\n\n" + "\n".join([f"{'ü•áü•àü•â'[i] if i < 3 else f'<b>{i+1}</b>.'} {escape(name)} | <b>–î—Ä—É–∑–µ–π:</b> {invited}" for i, (name, invited) in enumerate(top_users)])
            send_or_edit(call, text, back_to_main_kb(), photo=get_setting("top_image"))
        
        elif data.startswith("adm_"):
            if uid not in ADMINS: return
            local_cursor = conn.cursor()
            if data == "adm_main": send_or_edit(call, "<b>–ê–¥–º–∏–Ω-–º–µ–Ω—é:</b>", admin_menu_kb())
            
            elif data == "adm_broadcast_confirm":
                broadcast_data = bot.temp.get('pending_broadcast', {}).pop(uid, None)
                if not broadcast_data: return bot.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", call.message.chat.id, call.message.message_id, parse_mode="HTML")
                
                all_users = local_cursor.execute("SELECT user_id FROM users").fetchall()
                sent_count, failed_count = 0, 0
                bot.edit_message_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", call.message.chat.id, call.message.message_id, parse_mode="HTML")
                for (user_id,) in all_users:
                    try:
                        if broadcast_data['photo_id']: bot.send_photo(user_id, broadcast_data['photo_id'], caption=broadcast_data['text'], reply_markup=broadcast_data['kb'], parse_mode="HTML")
                        elif broadcast_data['video_id']: bot.send_video(user_id, broadcast_data['video_id'], caption=broadcast_data['text'], reply_markup=broadcast_data['kb'], parse_mode="HTML")
                        else: bot.send_message(user_id, broadcast_data['text'], reply_markup=broadcast_data['kb'], disable_web_page_preview=True, parse_mode="HTML")
                        sent_count += 1
                    except Exception: failed_count += 1
                    time.sleep(0.1)
                bot.send_message(uid, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {sent_count}\n<b>–ù–µ —É–¥–∞–ª–æ—Å—å:</b> {failed_count}", parse_mode="HTML")
                return

            elif data == "adm_broadcast_cancel":
                bot.temp.get('pending_broadcast', {}).pop(uid, None)
                bot.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id, parse_mode="HTML")
                return
            
            elif data == "adm_list_users":
                rows = local_cursor.execute("SELECT user_id, username, first_name, balance, invited FROM users ORDER BY created_at DESC LIMIT 50").fetchall()
                txt = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n" + "\n".join([f"üë§ <code>{r[0]}</code> ‚Äî {escape(r[2]) or (r[1] and '@'+r[1]) or f'ID: {r[0]}'} \nüí∞ <b>{float(r[3]):.2f} ‚≠ê</b> | ü§ù <b>{r[4]}</b> –∏–Ω–≤." for r in rows])
                send_or_edit(call, txt, types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_main")))
            elif data == "adm_settings": send_or_edit(call, "<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>", admin_settings_kb())
            elif data == "adm_settings_media": send_or_edit(call, "<b>üñº –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–¥–∏–∞:</b>", admin_media_settings_kb())
            elif data == "adm_settings_rewards": send_or_edit(call, "<b>üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–≥—Ä–∞–¥:</b>", admin_rewards_settings_kb())
            elif data == "adm_settings_general": send_or_edit(call, "<b>‚úèÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>", admin_general_settings_kb())
            elif data == "adm_settings_subgram": send_or_edit(call, "<b>üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SubGram:</b>", admin_subgram_settings_kb())
            elif data == "adm_promo": send_or_edit(call, "<b>üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏:</b>", admin_promo_kb())
            elif data == "adm_channels": send_or_edit(call, "<b>üîó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>", admin_channels_kb())
            elif data == "adm_promo_list":
                promos = local_cursor.execute("SELECT code, reward, uses_left FROM promo_codes").fetchall()
                text = "–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç." if not promos else "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n" + "\n".join([f"<code>{p[0]}</code> | <b>{p[1]} ‚≠ê</b> | {p[2] if p[2] != -1 else '‚àû'} –∏—Å–ø." for p in promos])
                send_or_edit(call, text, types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_promo")))
            elif data == "adm_channel_list":
                channels = local_cursor.execute("SELECT channel_id, title, username FROM channels").fetchall()
                text = "–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç." if not channels else "<b>–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n" + "\n".join([f"‚Ä¢ {escape(c[1])} (<code>{c[0]}</code> / @{c[2]})" for c in channels])
                send_or_edit(call, text, types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="adm_channels")))
            elif data in ["adm_change_balance", "adm_broadcast", "adm_edit_start", "adm_edit_earn_photo", "adm_edit_profile", "adm_edit_withdraw", "adm_edit_top_photo", "adm_edit_roulette_photo", "adm_edit_transfer_photo", "adm_set_click_reward", "adm_set_click_cooldown", "adm_set_min_invites", "adm_set_min_invites_transfer", "adm_set_bot_name", "adm_set_review_link", "adm_set_clicker_title", "adm_set_win_chance", "adm_set_referral_reward", "adm_set_daily_bonus", "adm_promo_add", "adm_promo_delete", "adm_channel_add", "adm_channel_delete", "adm_set_share_text", "adm_set_subgram_key", "adm_edit_subgram_op_photo", "adm_edit_subgram_task_photo", "adm_set_subgram_max_sponsors", "adm_set_subgram_task_reward"]:
                prompts = { "adm_change_balance": "–û–∂–∏–¥–∞—é: <code>user_id amount</code>", "adm_broadcast": "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏, –Ω–∞–ø–∏—à–∏ –µ–µ –Ω–∞ **–Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏|https://—Å—Å—ã–ª–∫–∞.com</code>", "adm_edit_start": "–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_edit_earn_photo": "–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å'. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_edit_profile": "–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_edit_withdraw": "–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –≤—ã–≤–æ–¥–∞. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_edit_top_photo": f"–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–ø–∞. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_edit_roulette_photo": f"–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_edit_transfer_photo": f"–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", "adm_set_click_reward": f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫.\n<b>–¢–µ–∫—É—â–∞—è:</b> {get_setting('click_reward')}", "adm_set_daily_bonus": f"–û—Ç–ø—Ä–∞–≤—å —Å—É–º–º—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞.\n<b>–¢–µ–∫—É—â–∞—è:</b> {get_setting('daily_bonus_amount')}", "adm_set_click_cooldown": f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω –≤ –º–∏–Ω—É—Ç–∞—Ö.\n<b>–¢–µ–∫—É—â–∏–π:</b> {float(get_setting('click_cooldown')) / 60} –º–∏–Ω", "adm_set_referral_reward": f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.\n<b>–¢–µ–∫—É—â–∞—è:</b> {get_setting('referral_reward')}", "adm_set_min_invites": f"–û—Ç–ø—Ä–∞–≤—å –º–∏–Ω. –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.\n<b>–¢–µ–∫—É—â–µ–µ:</b> {get_setting('min_invites_for_withdraw')}", "adm_set_min_invites_transfer": f"–û—Ç–ø—Ä–∞–≤—å –º–∏–Ω. –∫–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n<b>–¢–µ–∫—É—â–µ–µ:</b> {get_setting('min_invites_for_transfer')}", "adm_set_bot_name": f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ –∏–º—è –±–æ—Ç–∞.\n<b>–¢–µ–∫—É—â–µ–µ:</b> {get_setting('bot_name')}", "adm_set_review_link": f"–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_set_clicker_title": f"–û—Ç–ø—Ä–∞–≤—å —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–ª–∏–∫–µ—Ä–∞.\n<b>–¢–µ–∫—É—â–∏–π:</b> {get_setting('clicker_popup_title')}", "adm_set_share_text": f"–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è'.\n<b>–¢–µ–∫—É—â–∏–π:</b> {get_setting('share_text')}", "adm_set_win_chance": f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —à–∞–Ω—Å –ø–æ–±–µ–¥—ã –≤ —Ä—É–ª–µ—Ç–∫–µ (0-100).\n<b>–¢–µ–∫—É—â–∏–π:</b> {get_setting('roulette_win_chance')}%", "adm_promo_add": "–û—Ç–ø—Ä–∞–≤—å: <code>–ù–ê–ó–í–ê–ù–ò–ï –ù–ê–ì–†–ê–î–ê –ö–û–õ_–í–û</code> (-1 –¥–ª—è ‚àû)", "adm_promo_delete": "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_channel_add": "–ü–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ ID/username.", "adm_channel_delete": "–û—Ç–ø—Ä–∞–≤—å ID –∏–ª–∏ username (@username) –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_set_subgram_key": f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á –æ—Ç SubGram. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n<b>–¢–µ–∫—É—â–∏–π:</b> {get_setting('subgram_api_key')[:4]}..." if get_setting('subgram_api_key') else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "adm_edit_subgram_op_photo": f"–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è –û–ü. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_edit_subgram_task_photo": f"–û–∂–∏–¥–∞—é —Ñ–æ—Ç–æ –¥–ª—è –ó–∞–¥–∞–Ω–∏–π. '–Ω–µ—Ç' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", "adm_set_subgram_max_sponsors": f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–∞–∫—Å. –∫–æ–ª-–≤–æ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –æ—Ç SubGram –≤ –û–ü (1-10).\n<b>–¢–µ–∫—É—â–µ–µ:</b> {get_setting('subgram_max_sponsors')}", "adm_set_subgram_task_reward": f"–û—Ç–ø—Ä–∞–≤—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n<b>–¢–µ–∫—É—â–∞—è:</b> {get_setting('subgram_task_reward')}", }
                bot.temp["admin_sessions"][uid] = {"action": data.replace('adm_', '')}
                send_or_edit(call, prompts[data], types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="adm_main")))

    except Exception as e:
        import traceback
        print(f"!!! –û–®–ò–ë–ö–ê –≤ callback'–∞—Ö: {e}")
        traceback.print_exc()
    finally:
        try: bot.answer_callback_query(call.id)
        except: pass

@bot.message_handler(content_types=['text','photo', 'video'])
def handle_media_and_text(message: types.Message):
    uid = message.from_user.id
    try: u = ensure_user(message.from_user)[0]
    except Exception: return

    if uid in ADMINS and uid in bot.temp.get("admin_sessions", {}):
        sess = bot.temp["admin_sessions"].pop(uid)
        action = sess.get("action")
        local_cursor = conn.cursor()
        
        if action == "broadcast":
            text = message.text or message.caption
            photo_id = message.photo[-1].file_id if message.photo else None
            video_id = message.video.file_id if message.video else None
            buttons = re.findall(r'^(.+)\|(.+)$', text, re.MULTILINE)
            kb = None
            if buttons:
                clean_text = re.sub(r'^(.+)\|(.+)\n?', '', text, flags=re.MULTILINE).strip()
                kb = types.InlineKeyboardMarkup()
                for btn_text, btn_url in buttons:
                    kb.add(types.InlineKeyboardButton(btn_text.strip(), url=btn_url.strip()))
                text = clean_text
            
            bot.temp.setdefault('pending_broadcast', {})[uid] = {'text': text, 'photo_id': photo_id, 'video_id': video_id, 'kb': kb}
            
            confirm_kb = types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="adm_broadcast_confirm"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_broadcast_cancel")
            )
            bot.send_message(uid, "üëá <b>–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò</b> üëá", parse_mode="HTML")
            if photo_id: bot.send_photo(uid, photo_id, caption=text, reply_markup=kb, parse_mode="HTML")
            elif video_id: bot.send_video(uid, video_id, caption=text, reply_markup=kb, parse_mode="HTML")
            else: bot.send_message(uid, text, reply_markup=kb, disable_web_page_preview=True, parse_mode="HTML")
            bot.send_message(uid, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=confirm_kb, parse_mode="HTML")
            return
        
        elif action in ["edit_profile", "edit_withdraw", "edit_start", "edit_earn_photo", "edit_top_photo", "edit_roulette_photo", "edit_transfer_photo", "edit_subgram_op_photo", "edit_subgram_task_photo"]:
            key_map = { "edit_profile": ("profile_media", "profile_media_type"), "edit_withdraw": ("withdraw_media", "withdraw_media_type"), "edit_start": ("start_image", None), "edit_earn_photo": ("earn_image", None), "edit_top_photo": ("top_image", None), "edit_roulette_photo": ("roulette_image", None), "edit_transfer_photo": ("transfer_image", None), "edit_subgram_op_photo": ("subgram_op_image", None), "edit_subgram_task_photo": ("subgram_task_image", None) }
            key1, key2 = key_map[action]
            if message.photo:
                set_setting(key1, message.photo[-1].file_id)
                if key2: set_setting(key2, "photo")
                bot.send_message(uid, "‚úÖ <b>–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
            elif message.video and key2:
                set_setting(key1, message.video.file_id)
                if key2: set_setting(key2, "video")
                bot.send_message(uid, "‚úÖ <b>–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
            elif message.text and message.text.lower() in ['–Ω–µ—Ç', '—É–¥–∞–ª–∏', 'delete']:
                set_setting(key1, "")
                if key2: set_setting(key2, "none")
                bot.send_message(uid, "‚úÖ <b>–ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ.</b>", parse_mode="HTML")
            return

        # ================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö ==================
        numeric_settings_map = {
            "set_click_reward": "click_reward",
            "set_daily_bonus": "daily_bonus_amount",
            "set_referral_reward": "referral_reward",
            "set_win_chance": "roulette_win_chance",
            "set_subgram_task_reward": "subgram_task_reward",
            "set_click_cooldown": "click_cooldown",
            "set_min_invites": "min_invites_for_withdraw",
            "set_min_invites_transfer": "min_invites_for_transfer",
            "set_subgram_max_sponsors": "subgram_max_sponsors",
        }
        text_settings_map = {
            "set_bot_name": "bot_name",
            "set_clicker_title": "clicker_popup_title",
            "set_share_text": "share_text",
            "set_review_link": "review_channel_link",
            "set_subgram_key": "subgram_api_key",
        }

        if action in numeric_settings_map:
            try:
                value_str = message.text.strip().replace(',', '.')
                setting_key = numeric_settings_map[action]

                if action == "set_click_cooldown":
                    set_setting(setting_key, str(float(value_str) * 60))
                elif "min_invites" in action or "max_sponsors" in action:
                    set_setting(setting_key, str(int(value_str)))
                else:
                    set_setting(setting_key, str(float(value_str)))

                bot.send_message(uid, "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>", parse_mode="HTML")
            except ValueError:
                bot.send_message(uid, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", parse_mode="HTML")
            return

        if action in text_settings_map:
            value = "" if message.text.lower() in ['–Ω–µ—Ç', '—É–¥–∞–ª–∏', 'delete'] else message.text.strip()
            setting_key = text_settings_map[action]
            set_setting(setting_key, value)
            bot.send_message(uid, "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>", parse_mode="HTML")
            return
        # ================== –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ==================
        
        if action == "change_balance":
            try:
                target_id, amount = map(float, message.text.strip().split()); target_id = int(target_id)
                if not get_user(target_id): bot.send_message(uid, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
                else: add_balance(target_id, amount); new_balance = get_user(target_id)['balance']; bot.send_message(uid, f"–ë–∞–ª–∞–Ω—Å {target_id} –∏–∑–º–µ–Ω—ë–Ω. –ù–æ–≤—ã–π: <b>{new_balance:.2f} ‚≠ê</b>", parse_mode="HTML"); bot.send_message(target_id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω. –¢–µ–∫—É—â–∏–π: <b>{new_balance:.2f} ‚≠ê</b>", disable_notification=True, parse_mode="HTML")
            except: bot.send_message(uid, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ù—É–∂–Ω–æ: <code>user_id amount</code>", parse_mode="HTML")
        elif action == "promo_add":
            try:
                code, reward, uses = message.text.strip().split(); reward = float(reward); uses = int(uses)
                local_cursor.execute("INSERT OR REPLACE INTO promo_codes (code, reward, uses_left) VALUES (?, ?, ?)", (code, reward, uses))
                bot.send_message(uid, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.", parse_mode="HTML")
            except: bot.send_message(uid, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞.", parse_mode="HTML")
        elif action == "promo_delete":
            code = message.text.strip()
            local_cursor.execute("DELETE FROM promo_codes WHERE code = ?", (code,))
            bot.send_message(uid, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> {'—É–¥–∞–ª–µ–Ω' if local_cursor.rowcount > 0 else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}.", parse_mode="HTML")
        elif action == "channel_add":
            try:
                chat_id = message.forward_from_chat.id if message.forward_from_chat else message.text.strip()
                chat = bot.get_chat(chat_id)
                local_cursor.execute("INSERT OR REPLACE INTO channels (channel_id, username, title) VALUES (?, ?, ?)", (chat.id, chat.username or "", chat.title))
                bot.send_message(uid, f"‚úÖ –ö–∞–Ω–∞–ª ¬´{escape(chat.title)}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.", parse_mode="HTML")
            except Exception as e: bot.send_message(uid, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.\n<b>–û—à–∏–±–∫–∞:</b> {e}", parse_mode="HTML")
        elif action == "channel_delete":
            channel_id = message.text.strip()
            local_cursor.execute("DELETE FROM channels WHERE channel_id = ? OR username = ?", (channel_id, channel_id.replace('@', '')))
            bot.send_message(uid, f"‚úÖ –ö–∞–Ω–∞–ª <code>{channel_id}</code> {'—É–¥–∞–ª–µ–Ω' if local_cursor.rowcount > 0 else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}.", parse_mode="HTML")
        return

    if message.text and uid in bot.temp.get("promo_temp", {}):
        promo_code = message.text.strip()
        local_cursor = conn.cursor()
        promo = local_cursor.execute("SELECT reward, uses_left FROM promo_codes WHERE code = ?", (promo_code,)).fetchone()
        if not promo: bot.send_message(uid, "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        else:
            if local_cursor.execute("SELECT 1 FROM promo_activations WHERE code = ? AND user_id = ?", (promo_code, uid)).fetchone(): bot.send_message(uid, "‚ùå <b>–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.</b>", parse_mode="HTML")
            elif promo[1] == 0: bot.send_message(uid, "‚ùå <b>–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.</b>", parse_mode="HTML")
            else:
                reward = promo[0]; add_balance(uid, reward)
                local_cursor.execute("INSERT INTO promo_activations (code, user_id) VALUES (?, ?)", (promo_code, uid))
                if promo[1] != -1: local_cursor.execute("UPDATE promo_codes SET uses_left = uses_left - 1 WHERE code = ?", (promo_code,))
                bot.send_message(uid, f"‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{reward} ‚≠ê</b>.", parse_mode="HTML")
        bot.temp["promo_temp"].pop(uid, None)
        try: bot.delete_message(message.chat.id, message.message_id)
        except: pass
        show_profile_menu(u, message.chat.id)
        return

    if message.text and uid in bot.temp.get("transfer_mode", {}):
        try:
            recipient_id_str, amount_str = message.text.strip().split()
            recipient_id, amount = int(recipient_id_str), float(amount_str)
            if amount <= 0: return bot.send_message(uid, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.", parse_mode="HTML")
            if u['balance'] < amount: return bot.send_message(uid, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –£ –≤–∞—Å {u['balance']:.2f} ‚≠ê", parse_mode="HTML")
            if not get_user(recipient_id): return bot.send_message(uid, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ.", parse_mode="HTML")
            if recipient_id == uid: return bot.send_message(uid, "‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.", parse_mode="HTML")
            bot.temp['pending_transfer'][uid] = {'recipient': recipient_id, 'amount': amount}
            bot.send_message(uid, f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã: –ø–µ—Ä–µ–≤–æ–¥ <b>{amount} ‚≠ê</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{recipient_id}</code>.\n\n–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.", parse_mode="HTML")
        except (ValueError, IndexError):
            bot.send_message(uid, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ: <code>ID –°–£–ú–ú–ê</code>", parse_mode="HTML")
        return

    try: bot.delete_message(message.chat.id, message.message_id)
    except: pass
    cmd_start(message)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling(timeout=60)